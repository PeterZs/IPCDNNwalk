#include <list>
#include "gjoint_spherical.h"
#include "gjoint.h"
#include "gelement.h"
#include "liegroup.h"
#include "rmatrix3j.h"
#include "liegroup_rmatrix3_ext.h"



const double PI = 3.14159265358979;

//=============================================================
//                 GJointSpherical
//=============================================================
GJointSpherical::GJointSpherical()
{
	jointType = GJOINT_SPHERICAL;
	coord_chart = EULER_ZYX;
	b_fixed_coord_chart = false;
	pCoordinates.push_back(&coordinates[0]);
	pCoordinates.push_back(&coordinates[1]);
	pCoordinates.push_back(&coordinates[2]);
	allocate_memory(3);
}

void GJointSpherical::update_short()
{
	_validateCoordinateChart();

	double q0, q1, q2, dq0, dq1, dq2, ddq0, ddq1, ddq2, c0, c1, c2, s0, s1, s2;

	q0 = coordinates[0].q; q1 = coordinates[1].q; q2 = coordinates[2].q;
	dq0 = coordinates[0].dq; dq1 = coordinates[1].dq; dq2 = coordinates[2].dq;
	ddq0 = coordinates[0].ddq; ddq1 = coordinates[1].ddq; ddq2 = coordinates[2].ddq;
	c0 = cos(q0); c1 = cos(q1); c2 = cos(q2);
	s0 = sin(q0); s1 = sin(q1); s2 = sin(q2);

	switch ( coord_chart ) {

		case EULER_ZYX:

			T = SE3(c0*c1, 
				s0*c1, 
				-s1, 
				c0*s1*s2 - s0*c2, 
				s0*s1*s2 + c0*c2, 
				c1*s2, 
				c0*s1*c2 + s0*s2, 
				s0*s1*c2 - c0*s2, 
				c1*c2, 
				0.0, 0.0, 0.0);

			inv_T = SE3(~T.GetRotation());

			// S = [   -s1,    0,   1
			//       s2*c1,   c2,   0
			//       c1*c2,  -s2,   0 
			//           0,    0,   0
			//           0,    0,   0
			//           0,    0,   0 ];
			S.SetZero();
			S[0] = -s1; S[1] = s2*c1; S[2] = c1*c2; S[7] = c2; S[8] = -s2; S[12] = 1.0;

			break;

		case EULER_ZYZ:

			T = SE3(c0*c1*c2 - s0*s2, 
				s0*c1*c2 + c0*s2, 
				-s1*c2,	
				-c0*c1*s2 - s0*c2, 
				c0*c2 - s0*c1*s2, 
				s1*s2, 
				c0*s1, 
				s0*s1, 
				c1, 
				0, 0, 0);

			inv_T = SE3(~T.GetRotation());

			// S = [-s1*c2,   s2,   0
			//       s1*s2,   c2,   0
			//          c1,    0,   1 
			//           0,    0,   0
			//           0,    0,   0
			//           0,    0,   0 ];
			S.SetZero();
			S[0] = -s1*c2; S[1] = s1*s2; S[2] = c1; S[6] = s2; S[7] = c2; S[14] = 1.0;

			break;

		default:
			T.SetIdentity();
			inv_T.SetIdentity();
			S.SetZero();

			break;
	}

	if ( bReversed ) { _update_short_for_reversed_joint(); }
}

void GJointSpherical::update()
{
	_validateCoordinateChart();

	double q0, q1, q2, dq0, dq1, dq2, ddq0, ddq1, ddq2, c0, c1, c2, s0, s1, s2;

	q0 = coordinates[0].q; q1 = coordinates[1].q; q2 = coordinates[2].q;
	dq0 = coordinates[0].dq; dq1 = coordinates[1].dq; dq2 = coordinates[2].dq;
	ddq0 = coordinates[0].ddq; ddq1 = coordinates[1].ddq; ddq2 = coordinates[2].ddq;
	c0 = cos(q0); c1 = cos(q1); c2 = cos(q2);
	s0 = sin(q0); s1 = sin(q1); s2 = sin(q2);

	switch ( coord_chart ) {

		case EULER_ZYX:
			
			T = SE3(c0*c1, 
				s0*c1, 
				-s1, 
				c0*s1*s2 - s0*c2, 
				s0*s1*s2 + c0*c2, 
				c1*s2, 
				c0*s1*c2 + s0*s2, 
				s0*s1*c2 - c0*s2, 
				c1*c2, 
				0.0, 0.0, 0.0);

			inv_T = SE3(~T.GetRotation());
			
			Sdq = se3(-s1*dq0 + dq2,
				s2*c1*dq0 + c2*dq1,
				c1*c2*dq0 - s2*dq1,
				0.0, 0.0, 0.0);
			
			dSdq = se3(-c1*dq1*dq0,
				(c2*c1*dq2 - s2*s1*dq1)*dq0 - s2*dq2*dq1,
				(-s1*c2*dq1 - c1*s2*dq2)*dq0 - c2*dq2*dq1,
				0, 0, 0);
			
			Sddq = se3(-s1*ddq0 + ddq2,
				s2*c1*ddq0 + c2*ddq1,
				c1*c2*ddq0 - s2*ddq1,
				0, 0, 0);
			
			DSdqDt = Sddq + dSdq;
			
			// S = [   -s1,    0,   1
			//       s2*c1,   c2,   0
			//       c1*c2,  -s2,   0 
			//           0,    0,   0
			//           0,    0,   0
			//           0,    0,   0 ];
			S.SetZero();
			S[0] = -s1; S[1] = s2*c1; S[2] = c1*c2; S[7] = c2; S[8] = -s2; S[12] = 1.0;
			
			// dS = [               -c1*dq1,        0,   0
			//          c2*c1*dq2-s2*s1*dq1,  -s2*dq2,   0
			//         -s1*c2*dq1-c1*s2*dq2,  -c2*dq2,   0 
			//                            0,        0,   0
			//                            0,        0,   0
			//                            0,        0,   0 ];
			dS.SetZero();
			dS[0] = -c1*dq1; dS[1] = c2*c1*dq2 - s2*s1*dq1;	dS[2] = -s1*c2*dq1 - c1*s2*dq2;	
			dS[7] = -s2*dq2; dS[8] = -c2*dq2;

			break;

		case EULER_ZYZ:

			T = SE3(c0*c1*c2 - s0*s2, 
				s0*c1*c2 + c0*s2, 
				-s1*c2,	
				-c0*c1*s2 - s0*c2, 
				c0*c2 - s0*c1*s2, 
				s1*s2, 
				c0*s1, 
				s0*s1, 
				c1, 
				0, 0, 0);
			
			inv_T = SE3(~T.GetRotation());

			Sdq = se3(-s1*c2*dq0 + s2*dq1,
				s1*s2*dq0 + c2*dq1,
				c1*dq0 + dq2,
				0, 0, 0);
			
			dSdq = se3((-c1*c2*dq1 + s1*s2*dq2)*dq0 + c2*dq2*dq1,
				(c1*s2*dq1 + s1*c2*dq2)*dq0 - s2*dq2*dq1,
				-s1*dq1*dq0,
				0, 0, 0);
			
			Sddq = se3(-s1*c2*ddq0 + s2*ddq1,
				s1*s2*ddq0 + c2*ddq1,
				c1*ddq0 + ddq2,
				0, 0, 0);
			
			DSdqDt = Sddq + dSdq;
			
			// S = [-s1*c2,   s2,   0
			//       s1*s2,   c2,   0
			//          c1,    0,   1 
			//           0,    0,   0
			//           0,    0,   0
			//           0,    0,   0 ];
			S.SetZero();
			S[0] = -s1*c2; S[1] = s1*s2; S[2] = c1; S[6] = s2; S[7] = c2; S[14] = 1.0;
			
			// dS = [-c1*c2*dq1+s1*s2*dq2,   c2*dq2,   0
			//          c1*s2*dq1+s1*c2*dq2,  -s2*dq2,   0
			//                      -s1*dq1,        0,   0 
			//                            0,        0,   0
			//                            0,        0,   0
			//                            0,        0,   0 ];
			dS.SetZero();
			dS[0] = -c1*c2*dq1 + s1*s2*dq2; dS[1] = c1*s2*dq1 + s1*c2*dq2; dS[2] = -s1*dq1;
			dS[6] = c2*dq2; dS[7] = -s2*dq2;

			break;

		default:
			T.SetIdentity();
			inv_T.SetIdentity();
			Sdq.SetZero();
			dSdq.SetZero();
			Sddq.SetZero();
			DSdqDt.SetZero();
			S.SetZero();
			dS.SetZero();

			break;
	}

	if ( bReversed ) { _update_for_reversed_joint(); }
}

RMatrix GJointSpherical::get_DSDq(GCoordinate *pCoordinate_)
{
	int idx;
	double c1, c2, s1, s2;
	RMatrix DSDq;
	
	if ( pCoordinate_ == &coordinates[0] ) {
		idx = 0;
	} else if ( pCoordinate_ == &coordinates[1] ) {
		idx = 1;
	} else if ( pCoordinate_ == &coordinates[2] ) {
		idx = 2;
	} else {
		return Zeros(6,3);
	}

	DSDq.SetZero(6,3);

	switch ( coord_chart ) {

		case EULER_ZYX:

			switch ( idx ) {
				case 0:
					break;

				case 1:
					c1 = cos(coordinates[1].q);
					c2 = cos(coordinates[2].q);
					s1 = sin(coordinates[1].q);
					s2 = sin(coordinates[2].q);
					// DsDq = [    -c1, 0, 0
					//          -s2*s1, 0, 0
					//          -s1*c2, 0, 0
					//               0, 0, 0
					//               0, 0, 0
					//               0, 0, 0 ];
					DSDq[0] = -c1;		
					DSDq[1] = -s2*s1;
					DSDq[2] = -s1*c2;
					break;

				case 2:
					c1 = cos(coordinates[1].q);
					c2 = cos(coordinates[2].q);
					s1 = sin(coordinates[1].q);
					s2 = sin(coordinates[2].q);
					// DsDq = [      0,   0, 0
					//           c2*c1, -s2, 0
					//          -c1*s2, -c2, 0
					//               0,   0, 0
					//               0,   0, 0
					//               0,   0, 0 ];
					DSDq[1] = c2*c1;		
					DSDq[2] = -c1*s2;
					DSDq[7] = -s2;
					DSDq[8] = -c2;
					break;
			}

			break;

		case EULER_ZYZ:

			switch ( idx ) {
				case 0:
					break;

				case 1:
					c1 = cos(coordinates[1].q);
					c2 = cos(coordinates[2].q);
					s1 = sin(coordinates[1].q);
					s2 = sin(coordinates[2].q);
					// DsDq = [ -c1*c2, 0, 0
					//           c1*s2, 0, 0
					//             -s1, 0, 0
					//               0, 0, 0
					//               0, 0, 0
					//               0, 0, 0 ];
					DSDq[0] = -c1*c2;
					DSDq[1] = c1*s2;
					DSDq[2] = -s1;
					break;

				case 2:
					c1 = cos(coordinates[1].q);
					c2 = cos(coordinates[2].q);
					s1 = sin(coordinates[1].q);
					s2 = sin(coordinates[2].q);
					// DsDq = [ s1*s2,  c2, 0
					//          s1*c2, -s2, 0
					//              0,   0, 0
					//              0,   0, 0
					//              0,   0, 0
					//              0,   0, 0 ];
					DSDq[0] = s1*s2;
					DSDq[1] = s1*c2;
					DSDq[6] = c2;
					DSDq[7] = -s2;
					break;
			}

			break;
	}

	if ( bReversed ) {
		DSDq = -Ad(inv_T, DSDq) - ad(get_S(idx), S);
	}

	return DSDq;
}

RMatrix GJointSpherical::get_DdSDq(GCoordinate *pCoordinate_)
{
	int idx;
	double c1, c2, s1, s2, dq1, dq2;
	RMatrix DdSDq;

	if ( pCoordinate_ == &coordinates[0] ) {
		idx = 0;
	} else if ( pCoordinate_ == &coordinates[1] ) {
		idx = 1;
	} else if ( pCoordinate_ == &coordinates[2] ) {
		idx = 2;
	} else {
		return Zeros(6,3);
	}

	DdSDq.SetZero(6,3);

	switch ( coord_chart ) {

		case EULER_ZYX:

			switch ( idx ) {
				case 0:
					break;

				case 1:
					c1 = cos(coordinates[1].q);
					c2 = cos(coordinates[2].q);
					s1 = sin(coordinates[1].q);
					s2 = sin(coordinates[2].q);
					dq1 = coordinates[1].dq;
					dq2 = coordinates[2].dq;
					// DdSDq = [               s1*dq1, 0, 0
					//           -c2*s1*dq2-s2*c1*dq1, 0, 0
					//           -c1*c2*dq1+s1*s2*dq2, 0, 0
					//                              0, 0, 0
					//                              0, 0, 0
					//                              0, 0, 0
					//                              0, 0, 0 ];
					DdSDq[0] = s1*dq1;
					DdSDq[1] = -c2*s1*dq2-s2*c1*dq1;
					DdSDq[2] = -c1*c2*dq1+s1*s2*dq2;
					break;

				case 2:
					c1 = cos(coordinates[1].q);
					c2 = cos(coordinates[2].q);
					s1 = sin(coordinates[1].q);
					s2 = sin(coordinates[2].q);
					dq1 = coordinates[1].dq;
					dq2 = coordinates[2].dq;
					// DdSDq = [                    0,       0, 0
					//           -s2*c1*dq2-c2*s1*dq1, -c2*dq2, 0
					//            s1*s2*dq1-c1*c2*dq2,  s2*dq2, 0
					//                              0,       0, 0
					//                              0,       0, 0
					//                              0,       0, 0
					//                              0,       0, 0 ];
					DdSDq[1] = -s2*c1*dq2-c2*s1*dq1;	
					DdSDq[2] = s1*s2*dq1-c1*c2*dq2;
					DdSDq[7] = -c2*dq2;
					DdSDq[8] = s2*dq2;
					break;
			}

			break;

		case EULER_ZYZ:

			switch ( idx ) {
				case 0:
					break;

				case 1:
					c1 = cos(coordinates[1].q);
					c2 = cos(coordinates[2].q);
					s1 = sin(coordinates[1].q);
					s2 = sin(coordinates[2].q);
					dq1 = coordinates[1].dq;
					dq2 = coordinates[2].dq;
					// DdSDq = [  s1*c2*dq1+c1*s2*dq2, 0, 0
					//           -s1*s2*dq1+c1*c2*dq2, 0, 0
					//                        -c1*dq1, 0, 0
					//                              0, 0, 0
					//                              0, 0, 0
					//                              0, 0, 0 ];
					DdSDq[0] = s1*c2*dq1+c1*s2*dq2;
					DdSDq[1] = -s1*s2*dq1+c1*c2*dq2;
					DdSDq[2] = -c1*dq1;
					break;

				case 2:
					c1 = cos(coordinates[1].q);
					c2 = cos(coordinates[2].q);
					s1 = sin(coordinates[1].q);
					s2 = sin(coordinates[2].q);
					dq1 = coordinates[1].dq;
					dq2 = coordinates[2].dq;
					// DdSDq = [ c1*s2*dq1+s1*c2*dq2, -s2*dq2, 0
					//           c1*c2*dq1-s1*s2*dq2, -c2*dq2, 0
					//                             0,       0, 0
					//                             0,       0, 0
					//                             0,       0, 0
					//                             0,       0, 0 ];
					DdSDq[0] = c1*s2*dq1+s1*c2*dq2;
					DdSDq[1] = c1*c2*dq1-s1*s2*dq2;
					DdSDq[6] = -s2*dq2;
					DdSDq[7] = -c2*dq2;
					break;
			}

			break;
	}

	if ( bReversed ) {
		RMatrix DSDq = get_DSDq(pCoordinate_);
		DdSDq = -Ad(inv_T, DdSDq) - ad(get_S(idx), dS + ad(Sdq, S)) - ad(DSDq*get_dq(), S) - ad(Sdq, DSDq);
	}

	return DdSDq;
}

void GJointSpherical::_validateCoordinateChart()
{
	if ( b_fixed_coord_chart ) return;

	int i;
	RMatrix q(3,1), q_(3,1);					// q: current Euler angles, q_: another Euler angles
	RMatrix dq(3,1), dq_(3,1);					// dq: time derivative of q, dq_: time derivative of q_
	RMatrix ddq(3,1), ddq_(3,1);				// ddq: time derivative of dq, ddq_: time derivative of dq_
	RMatrix s(3,1), c(3,1), s_(3,1), c_(3,1);	// s[i] = sin(q[i]), c[i] = cos(q[i]), s_[i] = sin(q_[i]), c_[i] = cos(q_[i])
	RMatrix J(3,3), J_(3,3), invJ_(3,3);
	RMatrix dJdt(3,3), dJdt_(3,3);

	// find q, dq, ddq
	for (i=0; i<3; i++)
	{
		q[i] = coordinates[i].q;
		dq[i] = coordinates[i].dq;
		ddq[i] = coordinates[i].ddq;
		s[i] = sin(q[i]);
		c[i] = cos(q[i]);
	}
	// set 0 <= q <= 2*PI for convenience 
	for (i=0; i<3; i++)
	{
		q[i] = fmod(q[i], 2.0*PI);
		if ( q[i] < 0.0 ) q[i] += 2.0*PI;
	}

	switch ( coord_chart ) {

		case EULER_ZYX:

			if ( ( q[1] > PI/4. && q[1] < 3./4.*PI ) || ( q[1] > 5./4.*PI && q[1] < 7./4.*PI ) )
			{
				// calculate q_ from q
				q_[0] = atan2(s[0] * s[1] * c[2] - c[0] * s[2], c[0] * s[1] * c[2] + s[0] * s[2]);
				q_[1] = atan2(sqrt(1.0 - c[1] * c[1] * c[2] * c[2]), c[1] * c[2]);
				q_[2] = atan2(c[1] * s[2], s[1]);

				// calculate dq_
				// calculate sin(q_), cos(q_)
				for (i=0; i<3; i++)
				{
					s_[i] = sin(q_[i]);
					c_[i] = cos(q_[i]);
				}
				// calculate J: Jacobian of Euler_ZYX
				J[0] = -s[1];			J[3] = 0.0;			J[6] = 1.0;
				J[1] = s[2]*c[1];		J[4] = c[2];		J[7] = 0.0;
				J[2] = c[1]*c[2];		J[5] = -s[2];		J[8] = 0.0;
				// calculate J_: Jacobian of Euler_ZYZ
				J_[0] = -s_[1]*c_[2];	J_[3] = s_[2];		J_[6] = 0.0;
				J_[1] = s_[1]*s_[2];	J_[4] = c_[2];		J_[7] = 0.0;
				J_[2] = c_[1];			J_[5] = 0.0;		J_[8] = 1.0;
				// calculate dq_ = Inv(J_)*J*dq
				invJ_ = Inv(J_);
				dq_ = invJ_ * J * dq;

				// calculate ddq_
				dJdt.SetZero(6,3); dJdt_.SetZero(6,3);
				// calculate dJdt: DotJacobian of Euler_ZYX
				dJdt[0] = -c[1]*dq[1];								dJdt[6] = 0.0;				dJdt[12] = 0.0;
				dJdt[1] = c[2]*c[1]*dq[2] - s[2]*s[1]*dq[1];		dJdt[7] = -s[2]*dq[2];		dJdt[13] = 0.0;
				dJdt[2] = -s[1]*c[2]*dq[1] - c[1]*s[2]*dq[2];		dJdt[8] = -c[2]*dq[2];		dJdt[14] = 0.0;
				// calculate dJdt_: DotJacobian of Euler_ZYZ
				dJdt_[0] = -c_[1]*c_[2]*dq_[1] + s_[1]*s_[2]*dq_[2];	dJdt_[6] = c_[2]*dq_[2];	dJdt_[12] = 0.0;
				dJdt_[1] = c_[1]*s_[2]*dq_[1] + s_[1]*c_[2]*dq_[2];		dJdt_[7] = -s_[2]*dq_[2];	dJdt_[13] = 0.0;
				dJdt_[2] = -s_[1]*dq_[1];								dJdt_[8] = 0.0;				dJdt_[14] = 0.0;
				// calculate ddq_ = Inv(J_)*( -dJdt_*dq_ + dJdt*dq + Inv(J_)*J*ddq )
				ddq_ = invJ_ * ( -dJdt_ * dq_ + dJdt * dq + invJ_ * J * ddq );

				// change coord_chart
				coord_chart = EULER_ZYZ;
				for (i=0; i<3; i++)
				{
					coordinates[i].q = q_[i];
					coordinates[i].dq = dq_[i];
					coordinates[i].ddq = ddq_[i];
				}
			}
			break;

		case EULER_ZYZ:

			if ( q[1] < PI/4. || ( q[1] > 3./4.*PI && q[1] < 5./4.*PI ) || q[1] > 7./4.*PI )
			{
				// calculate q_ from q
				q_[0] = atan2(s[0] * c[1] * c[2] + c[0] * s[2], c[0] * c[1] * c[2] - s[0] * s[2]);
				q_[1] = atan2(s[1] * c[2], sqrt(1.0 + c[2] * c[2] * (c[1] * c[1] - 1.0)));
				q_[2] = atan2(s[1] * s[2], c[1]);

				// calculate dq_
				// calculate sin(q_), cos(q_)
				for (i=0; i<3; i++)
				{
					s_[i] = sin(q_[i]);
					c_[i] = cos(q_[i]);
				}
				// calculate J: Jacobian of Euler_ZYZ
				J[0] = -s[1]*c[2];		J[3] = s[2];		J[6] = 0.0;
				J[1] = s[1]*s[2];		J[4] = c[2];		J[7] = 0.0;
				J[2] = c[1];			J[5] = 0.0;			J[8] = 1.0;
				// calculate J_: Jacobian of Euler_ZYX
				J_[0] = -s_[1];			J_[3] = 0.0;		J_[6] = 1.0;
				J_[1] = s_[2]*c_[1];	J_[4] = c_[2];		J_[7] = 0.0;
				J_[2] = c_[1]*c_[2];	J_[5] = -s_[2];		J_[8] = 0.0;
				// calculate dq_ = Inv(J_)*J*dq
				invJ_ = Inv(J_);
				dq_ = invJ_*J*dq;

				// calculate ddq_
				dJdt.SetZero(6,3); dJdt_.SetZero(6,3);
				// calculate dJdt: DotJacobian of Euler_ZYZ
				dJdt[0] = -c[1]*c[2]*dq[1] + s[1]*s[2]*dq[2];	dJdt[6] = c[2]*dq[2];		dJdt[12] = 0.0;
				dJdt[1] = c[1]*s[2]*dq[1] + s[1]*c[2]*dq[2];	dJdt[7] = -s[2]*dq[2];		dJdt[13] = 0.0;
				dJdt[2] = -s[1]*dq[1];							dJdt[8] = 0.0;				dJdt[14] = 0.0;
				// calculate dJdt_: DotJacobian of Euler_ZYX
				dJdt_[0] = -c_[1]*dq_[1];								dJdt_[6] = 0.0;				dJdt_[12] = 0.0;
				dJdt_[1] = c_[2]*c_[1]*dq_[2] - s_[2]*s_[1]*dq_[1];		dJdt_[7] = -s_[2]*dq_[2];	dJdt_[13] = 0.0;
				dJdt_[2] = -s_[1]*c_[2]*dq_[1] - c_[1]*s_[2]*dq_[2];	dJdt_[8] = -c_[2]*dq_[2];	dJdt_[14] = 0.0;
				// calculate ddq_ = Inv(J_)*( -dJdt_*dq_ + dJdt*dq + Inv(J_)*J*ddq )
				ddq_ = invJ_ * ( -dJdt_ * dq_ + dJdt * dq + invJ_ * J * ddq );

				// change coord_chart
				coord_chart = EULER_ZYX;
				for (i=0; i<3; i++)
				{
					coordinates[i].q = q_[i];
					coordinates[i].dq = dq_[i];
					coordinates[i].ddq = ddq_[i];
				}
			}
			break;
	}
}

void GJointSpherical::_update_short_for_reversed_joint()
{
	SE3 T_tmp = T;
	T = inv_T;
	inv_T = T_tmp;

	//S = -Ad(inv_T, S);

	SO3 iR = inv_T.GetRotation();
	Vec3 si;
	for (int i=0; i<3; i++) {
		si = iR * -Vec3(S(0,i),S(1,i),S(2,i));
		S(0,i) = si[0]; S(1,i) = si[1]; S(2,i) = si[2];
	}
}

void GJointSpherical::_update_for_reversed_joint()
{
	SE3 T_tmp = T;
	T = inv_T;
	inv_T = T_tmp;

	//Sdq = -Ad(inv_T, Sdq);
	//dSdq = -Ad(inv_T, dSdq);
	//Sddq = -Ad(inv_T, Sddq);
	//DSdqDt = Sddq + dSdq;
	//S = -Ad(inv_T, S);
	//dS = -Ad(inv_T, dS) - ad(Sdq, S);

	SO3 iR = inv_T.GetRotation();	// rotation matrix of the new inv_T
	Vec3 s, ds;

	Sdq = se3(iR * -GetW(Sdq), Vec3(0,0,0));
	dSdq = se3(iR * -GetW(dSdq), Vec3(0,0,0));
	Sddq = se3(iR * -GetW(Sddq), Vec3(0,0,0));
	DSdqDt = Sddq + dSdq;

	for (int i=0; i<3; i++) {
		s = iR * -Vec3(S(0,i),S(1,i),S(2,i));
		ds = iR * -Vec3(dS(0,i),dS(1,i),dS(2,i)) - Cross(GetW(Sdq), s);	// Sdq, s are the new ones, not the old ones!
		S(0,i) = s[0]; S(1,i) = s[1]; S(2,i) = s[2];
		dS(0,i) = ds[0]; dS(1,i) = ds[1]; dS(2,i) = ds[2];
	}
}
